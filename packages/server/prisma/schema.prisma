// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id       String            @id @default(uuid())
  email    String            @unique
  name     String
  status   String?
  records  Record[]
  projects FavoriteProject[]
  slack    Slack?
  invoices InvoiceItem[]
}

model Project {
  id             String            @id @default(uuid())
  name           String            @unique
  description    String
  status         String
  isBillable     Boolean           @default(true)
  rate           Float             @default(65)
  fte            Float             @default(0)
  records        Record[]
  employees      FavoriteProject[]
  invoices       Invoice[]
  contractTypeId Int               @default(0)
  contractType   ContractType      @relation(fields: [contractTypeId], references: [id])
}

model Record {
  date       DateTime @db.Date
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  hours      Float    @default(0)

  @@id([date, employeeId, projectId])
}

model FavoriteProject {
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])

  @@id([employeeId, projectId])
}

model Invoice {
  invoiceId   String        @unique @default(uuid())
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id])
  startDate   DateTime      @db.Date
  endDate     DateTime      @db.Date
  rate        Float
  hours       Float
  amount      Float
  comments    Comment[]
  clickUpTask ClickUpTask?
  items       InvoiceItem[]

  @@id([projectId, startDate, endDate])
}

model ClickUpTask {
  id        String  @id
  url       String
  invoiceId String  @unique
  invoice   Invoice @relation(fields: [invoiceId], references: [invoiceId])
}

model Comment {
  commentId  String   @id @default(uuid())
  createDate DateTime @default(now())
  content    String
  invoiceId  String
  invoice    Invoice  @relation(fields: [invoiceId], references: [invoiceId])
  deletable  Boolean  @default(true)
}

model Slack {
  slackId    String   @id
  employeeId String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model ContractType {
  id       Int       @id @default(autoincrement())
  name     String
  projects Project[]
}

model InvoiceItem {
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [invoiceId])
  employeeId    String
  employee      Employee @relation(fields: [employeeId], references: [id])
  workHours     Float
  indirectHours Float
  billableHours Float
  rate          Float
  amount        Float

  @@id([invoiceId, employeeId])
}
