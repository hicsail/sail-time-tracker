# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type EmployeeModel {
  id: ID!
  email: String!
  name: String!
  status: String
  projects: [ProjectModel!]!
  recordsWithFavoriteProjects(startDate: DateTime!, endDate: DateTime!): [GroupedRecordWithFavoriteProjectModel!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EmployeeDeleteReturnModel {
  count: Float!
}

type EmployeeWithRecord {
  id: String!
  name: String!
  status: String!
  workHours: Float!
  indirectHours: Float!
  billableHours: Float!
  inner: [EmployeeWithRecordInner!]!
}

type EmployeeWithRecordInner {
  projectId: String!
  projectName: String!
  rate: Float!
  fte: Float!
  status: String!
  contractTypeId: Float!
  isBillable: Boolean!
  projectWorkHours: Float!
  projectIndirectHours: Float!
  projectPercentage: String!
}

type ProjectWithEmployeeRecords {
  id: String!
  name: String!
  isBillable: Boolean!
  rate: Float!
  status: String!
  fte: Float!
  contractTypeId: Float!
  workHours: Float!
  indirectHours: Float!
  billableHours: Float!
  percentage: String!
  inner: [ProjectWithEmployeeRecordsInner!]!
}

type ProjectWithEmployeeRecordsInner {
  employeeId: String!
  employeeName: String!
  employeeWorkHours: Float!
  employeeIndirectHours: Float!
  employeePercentage: String!
}

type BatchResponseModel {
  success: Boolean!
  message: String!
  count: Float!
}

type ProjectModel {
  id: ID!
  name: String!
  status: String!
  description: String!
  isBillable: Boolean!
  rate: Float!
  fte: Float!
}

type ContractTypeModel {
  id: Float!
  name: String!
}

type ProjectWithContractType {
  id: ID!
  name: String!
  status: String!
  description: String!
  isBillable: Boolean!
  rate: Float!
  fte: Float!
  contractType: ContractTypeModel!
}

type ProjectDeleteReturnModel {
  count: Float!
}

type RecordInsertOrUpdateModel {
  employeeId: ID!
  projectId: ID!
  date: DateTime!
  hours: Float!
}

type RecordWithFavoriteProjectModel {
  date: String
  hours: Float!
}

type GroupedRecordWithFavoriteProjectModel {
  projectId: String!
  projectName: String!
  description: String!
  isFavorite: Boolean!
  records: [RecordWithFavoriteProjectModel!]!
}

type BatchPayload {
  count: Float!
}

type CommentModel {
  commentId: String!
  createDate: DateTime!
  content: String!
  invoiceId: String!
  deletable: Boolean!
}

type ClickUpTaskModel {
  id: String!
  url: String!
}

type ListCustomFieldTypeConfig {
  options: [ListCustomFieldTypeConfigOptions!]
}

type ListCustomFieldTypeConfigOptions {
  id: String!
  name: String
  orderindex: Float
  label: String
}

type ListCustomField {
  id: String!
  name: String!
  type: String!
  type_config: ListCustomFieldTypeConfig!
  required: Boolean
}

type ClickUpStatuses {
  id: String!
  status: String!
  orderindex: Float!
  color: String!
  type: String!
}

type InvoiceModel {
  projectId: String!
  startDate: DateTime!
  endDate: DateTime!
  rate: Float!
  hours: Float!
  amount: Float!
  invoiceId: String!
}

type InvoiceModelWithProject {
  projectId: String!
  startDate: DateTime!
  endDate: DateTime!
  rate: Float!
  hours: Float!
  amount: Float!
  invoiceId: String!
  project: ProjectModel!
}

type InvoiceModelWithProjectAndComments {
  projectId: String!
  startDate: DateTime!
  endDate: DateTime!
  rate: Float!
  hours: Float!
  amount: Float!
  invoiceId: String!
  project: ProjectModel!
  comments: [CommentModel!]!
  clickUpTask: ClickUpTaskModel
}

type Query {
  employees: [EmployeeModel!]!
  employee(id: String!): EmployeeModel!
  getEmployeesWithRecord(startDate: DateTime!, endDate: DateTime!): [EmployeeWithRecord!]!
  getProjectWithEmployeeRecords(startDate: DateTime!, endDate: DateTime!): [ProjectWithEmployeeRecords!]!
  projects: [ProjectWithContractType!]!
  project(id: String!): ProjectWithContractType!
  invoices: [InvoiceModelWithProject!]!
  searchInvoice(projectId_startDate_endDate: InvoiceSearchInput!): InvoiceModelWithProjectAndComments!
  searchInvoicesByDateRange(startDate: DateTime!, endDate: DateTime!): [InvoiceModel!]!
  findPreviousInvoice(projectId: String!, startDate: DateTime!): InvoiceModelWithProjectAndComments
  findNextInvoice(projectId: String!, endDate: DateTime!): InvoiceModelWithProjectAndComments
  comment(id: String!): CommentModel!
  comments: [CommentModel!]!
  getClickUpCustomFields: [ListCustomField!]!
  getClickUpStatuses: [ClickUpStatuses!]!
  getClickUpTask(taskId: String!): Boolean
}

input InvoiceSearchInput {
  projectId: String!
  startDate: DateTime!
  endDate: DateTime!
}

type Mutation {
  addEmployee(employee: EmployeeCreateInput!): EmployeeModel!
  updateEmployee(updateEmployee: EmployeeUpdateInput!): EmployeeModel!
  deleteEmployees(ids: [String!]!): EmployeeDeleteReturnModel!
  addSlackUser(slackUsers: [SlackEmployeeInput!]!): BatchPayload!
  sendSlackMessage(slackSendMessageInput: SendSlackMessageInput!): Boolean!
  batchSendingMessages(input: BatchSendSlackMessageInput!): BatchResponseModel!
  addProject(project: ProjectCreateInput!): ProjectModel!
  updateProject(updateProject: ProjectUpdateInput!): ProjectModel!
  deleteProjects(ids: [String!]!): ProjectDeleteReturnModel!
  addFavoriteProject(favoriteProject: [FavoriteProjectCreateInput!]!): BatchPayload!
  deleteFavoriteProjects(employeeId: String!, projectIds: [String!]!): BatchPayload!
  insertOrUpdateRecord(record: RecordCreateInput!): RecordInsertOrUpdateModel!
  createOrUpdateInvoice(invoice: InvoiceCreateInput!): InvoiceModel!
  deleteInvoice(projectId_startDate_endDate: InvoiceSearchInput!): InvoiceModel!
  addComment(input: CommentCreateInput!): CommentModel!
  deleteComment(id: String!): CommentModel!
  createClickUpTask(task: ClickUpTaskCreateInput!): ClickUpTaskModel!
  createAndAddClickUpTaskToInvoice(invoiceId: String!, task: ClickUpTaskInput!): ClickUpTaskModel!
  updateClickUpTask(task: ClickUpTaskUpdateInput!): ClickUpTaskModel!
}

input EmployeeCreateInput {
  name: String!
  email: String!
  status: String
}

input EmployeeUpdateInput {
  name: String!
  email: String!
  status: String
  id: ID!
}

input SlackEmployeeInput {
  employeeId: String!
  slackId: String!
}

input SendSlackMessageInput {
  employeeId: String!
  message: String!
}

input BatchSendSlackMessageInput {
  employeeIds: [String!]!
  message: String!
}

input ProjectCreateInput {
  name: String!
  status: String!
  description: String!
  isBillable: Boolean!
  fte: Float!
  rate: Float!
  contractTypeId: Float!
}

input ProjectUpdateInput {
  name: String!
  status: String!
  description: String!
  isBillable: Boolean!
  fte: Float!
  rate: Float!
  contractTypeId: Float!
  id: ID!
}

input FavoriteProjectCreateInput {
  employeeId: ID!
  projectId: ID!
}

input RecordCreateInput {
  employeeId: ID!
  projectId: ID!
  hours: Float!
  date: DateTime!
}

input InvoiceCreateInput {
  projectId: String!
  startDate: DateTime!
  endDate: DateTime!
  rate: Float!
  hours: Float!
  amount: Float!
}

input CommentCreateInput {
  content: String!
  invoiceId: String!
  deletable: Boolean
}

input ClickUpTaskCreateInput {
  name: String!
  description: String!
  status: String!
  custom_fields: [ClickUpTaskCustomFieldsInput!]!
}

input ClickUpTaskCustomFieldsInput {
  id: String!
  value: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input ClickUpTaskInput {
  id: String!
  url: String!
}

input ClickUpTaskUpdateInput {
  name: String!
  description: String!
  status: String!
  custom_fields: [ClickUpTaskCustomFieldsInput!]!
  id: String!
}