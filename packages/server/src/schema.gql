# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type EmployeeModel {
  id: ID!
  email: String!
  name: String!
  rate: Float!
  status: String
  projects: [ProjectModel!]!
  records(startDate: DateTime!, endDate: DateTime!): [RecordModelWithProject!]!
  recordsWithFavoriteProjects(date: DateTime!): [RecordWithFavoriteProjectModel!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EmployeeDeleteReturnModel {
  count: Float!
}

type ProjectModel {
  id: ID!
  name: String!
  status: String!
  description: String!
  isBillable: Boolean!
  records(startDate: DateTime!, endDate: DateTime!): [RecordModelWithEmployee!]!
}

type ProjectDeleteReturnModel {
  count: Float!
}

type RecordInsertOrUpdateModel {
  employeeId: ID!
  projectId: ID!
  date: DateTime!
  hours: Float!
}

type RecordModelWithProject {
  startDate: DateTime!
  endDate: DateTime!
  hours: Float!
  project: ProjectModel!
}

type RecordModelWithEmployee {
  startDate: DateTime!
  endDate: DateTime!
  hours: Float!
  employee: EmployeeModel!
}

type RecordWithFavoriteProjectModel {
  id: ID!
  name: String!
  status: String!
  description: String!
  isBillable: Boolean!
  records(startDate: DateTime!, endDate: DateTime!): [RecordModelWithEmployee!]!
  isFavorite: Boolean!
  hours: Float!
  previousWeek: Float!
}

type BatchPayload {
  count: Float!
}

type InvoiceModel {
  projectId: String!
  employeeId: String!
  startDate: DateTime!
  endDate: DateTime!
  rate: Float!
  hours: Float!
  amount: Float!
  employee: EmployeeModel!
  project: ProjectModel!
}

type InvoiceSummaryModel {
  projectId: String!
  projectName: String!
  startDate: DateTime!
  endDate: DateTime!
  hours: Float!
  amount: Float!
}

type Query {
  employees: [EmployeeModel!]!
  employee(id: String!): EmployeeModel!
  projects: [ProjectModel!]!
  project(id: String!): ProjectModel!
  invoices: [InvoiceModel!]!
  invoiceSummary: [InvoiceSummaryModel!]!
}

type Mutation {
  addEmployee(employee: EmployeeCreateInput!): EmployeeModel!
  updateEmployee(updateEmployee: EmployeeUpdateInput!): EmployeeModel!
  deleteEmployees(ids: [String!]!): EmployeeDeleteReturnModel!
  addProject(project: ProjectCreateInput!): ProjectModel!
  updateProject(updateProject: ProjectUpdateInput!): ProjectModel!
  deleteProjects(ids: [String!]!): ProjectDeleteReturnModel!
  addFavoriteProject(favoriteProject: [FavoriteProjectCreateInput!]!): BatchPayload!
  deleteFavoriteProjects(employeeId: String!, projectIds: [String!]!): BatchPayload!
  insertOrUpdateRecord(record: RecordCreateInput!): RecordInsertOrUpdateModel!
  searchInvoices(searchInvoiceInput: SearchInvoiceInput!): [InvoiceModel!]!
  createOrUpdateManyInvoice(invoices: [InvoiceCreateInput!]!): BatchPayload!
}

input EmployeeCreateInput {
  name: String!
  email: String!
  rate: Float!
  status: String
}

input EmployeeUpdateInput {
  name: String!
  email: String!
  rate: Float!
  status: String
  id: ID!
}

input ProjectCreateInput {
  name: String!
  status: String!
  description: String!
  isBillable: Boolean!
}

input ProjectUpdateInput {
  name: String!
  status: String!
  description: String!
  isBillable: Boolean!
  id: ID!
}

input FavoriteProjectCreateInput {
  employeeId: ID!
  projectId: ID!
}

input RecordCreateInput {
  employeeId: ID!
  projectId: ID!
  hours: Float!
  date: DateTime!
}

input SearchInvoiceInput {
  projectId: String!
  startDate: DateTime!
  endDate: DateTime!
}

input InvoiceCreateInput {
  projectId: String!
  employeeId: String!
  startDate: DateTime!
  endDate: DateTime!
  rate: Float!
  hours: Float!
  amount: Float!
}